import faiss
import pickle
import numpy as np
from openai import OpenAI
from dotenv import load_dotenv

FEW_SHOTS = """
👩‍🏫 챗봇:
안녕하세요.
아이가 친구들과 잘 어울리지 못하고 소심한 모습을 보인다고 하셨죠.
걱정이 크실 거예요.
자녀의 나이, 성별, 지역을 알려주시면 먼저 원인을 함께 분석해볼게요.

👩 부모:
6살 여자아이, 서울이에요.

👩‍🏫 챗봇:
감사합니다.
그럼 아이가 또래 관계에서 위축될 수 있는 심리적 원인을 먼저 살펴볼게요.

🔍 원인 ① – 안정 애착 부족

아이가 친구들 사이에서 위축되는 건,
부모와의 안정된 애착이 충분히 형성되지 않았을 때 생길 수 있어요.
부모가 늘 일관되게 반응해주지 못했거나, 감정 표현을 안전하게 할 기회가 부족했다면
아이는 자신을 표현하는 데 어려움을 느낄 수 있죠.
예를 들어, 속상할 때 “그럴 수도 있지”보다는 “왜 그런 걸로 울어?” 같은 반응을 자주 들었다면,
아이는 점점 자기 감정을 숨기게 돼요.
또한, 신체적 애정 표현이나 규칙적인 생활이 부족하면 아이는 기본적인 안정감을 덜 느끼게 돼요.
이런 불안정함이 쌓이면, 낯선 상황이나 또래 관계에서도 쉽게 주눅이 들 수 있어요.
그래서 아이가 소심한 모습이라면, 이런 초기 애착 경험을 함께 돌아보는 것도 필요해요.

🟡 이 원인이 맞는 것 같나요?
👉 [네, 그런 것 같아요] / [잘 모르겠어요] / [다른 원인도 보고 싶어요]

🔍 원인 ② – 주도성 발달 기회 부족 (에릭슨의 이론)

아이가 소심해 보이는 건,
자신감을 키우는 시기에 충분한 '시도 경험'을 하지 못했기 때문일 수도 있어요.
에릭슨의 발달이론에 따르면, 이 시기 아이는 스스로 해보는 경험을 통해 '주도성'을 형성해요.
그런데 누군가 대신 해주거나, 시도할 때마다 “위험해”, “지금은 안 돼”라는 제지를 자주 받았다면
아이는 점점 “나는 못 해”, “하면 안 되는 거야”라고 느끼게 돼요.
실패하거나 시도할 기회가 적었던 아이는, 처음부터 도전 자체를 두려워하게 돼요.
그래서 친구와 어울리는 상황에서도 쉽게 움츠러들고, 대화나 놀이를 피하게 되는 거예요.
아이가 소심한 건 성격이라기보다는, 주도성을 키울 환경이 부족했던 것일 수 있어요.

👩‍🏫 챗봇:
이런 원인들을 바탕으로,
아이가 친구가 없다고 말할 때 어떤 대화를 나누면 좋을지 함께 알아볼까요?

🗣️ 상황별 대화 예시
🧒 “친구들이 다 무리 지어서 나만 혼자야.”
👩 “그래서 외롭고, 나만 빠진 것 같았겠다.
무리 속에 들어가는 게 괜히 어렵고 눈치도 보였을 거야.
그치만 꼭 많은 친구가 필요한 건 아니야.
편한 친구 한 명만 있어도 괜찮아.
‘같이 ○○ 해도 돼?’ 하고 천천히 다가가보자.”

🧒 “만약 걔가 나랑 놀기 싫어하면 어떡해?”
👩 “그런 걱정이 드는 거, 정말 이해돼.
거절당하면 속상할 수 있으니까.
근데 친구들도 그날그날 기분이 달라.
너는 다가갈 수 있는 용기를 가진 아이야.”

🧒 “같이 하자고 해도 계속 다른 애들만 끼워줘.”
👩 “속상하지, 왜 나만 안 되는 거지 싶은 마음 들 거야.
그래도 너는 계속 용기 내고 있잖아.
그게 얼마나 대단한 일인지 알아?
그런 진심을 알아봐주는 친구는 꼭 나타날 거야.”

🧒 “혼자 있는 게 더 편해.”
👩 “그래, 혼자 있는 게 편할 때도 있어.
네가 너 자신을 잘 아는 거야.
무리에 꼭 끼지 않아도 돼.
하지만 언젠가 누군가 곁에 있었으면 좋겠다고 느낀다면,
조용히 함께 있는 방법도 있다는 걸 기억해줘.”

👩‍🏫 챗봇:
다음으로, 절대 하지 말아야 할 말은 무엇인지 함께 생각해볼까요?

👉 [응] 클릭

👩 부모:
응

👩‍🏫 챗봇:
많은 부모님이 선의로 이렇게 말하곤 해요.
❌ “네가 먼저 다가가지 않으니까 그렇지.”
하지만 아이 입장에서는 **“내가 문제라서 친구가 없는 거야”**라고 느낄 수 있어요.
이런 말은 자존감을 떨어뜨리고, 더 움츠러들게 만들어요.

✔ 대신 이렇게 말해보세요:

“친구한테 먼저 다가가는 게 어려웠을 수도 있겠네.
어떤 순간이 제일 힘들었어?”

👩‍🏫 챗봇:
이제, 가정에서 아이의 사회성을 기를 수 있는 실천 팁도 알려드릴게요.
👉 [응] 클릭

👩 부모:
응

👩‍🏫 챗봇:
아이가 친구 관계에 자신감을 갖도록,
가정에서 이렇게 연습해보세요.

🔹 1. 하루 한 번 '마음 대화' 나누기
예: “오늘 기분은 어땠어?”, “친구랑 뭐 했어?”
→ 감정 표현, 공감, 갈등 대처력 향상
📊 8주간 실천한 가정: 공감력·감정 조절력 30%↑

🔹 2. 친구에게 말 거는 문장 연습
예: “나도 껴줘~”, “같이 해도 돼?”
→ 상황별 표현에 익숙해지면 말 걸기가 훨씬 쉬워져요
📊 훈련한 아이는 친구에게 말 거는 성공률 2배↑

🔹 3. 역할놀이 (부모가 친구 역할)
예: “친구가 자기 말만 해. 뭐라고 할래?”
→ 현실 대처력, 대화 용기 키우는 데 효과적
📊 6주간 실천 시 대화 전략 점수 28%↑

📌 이 대화를 저장해두시고,
2주 뒤 아이에게 어떤 변화가 생겼는지 함께 점검해보세요.

필요하시면 이후
✅ 감정 변화 리포트 받기
✅ 추가 실천 과제
✅ 교사/전문가와 연결하기
도 도와드릴 수 있어요. 원하시나요?
"""

load_dotenv()
client = OpenAI()

# === FAISS & chunks 불러오기 ===
index = faiss.read_index("faiss_index.idx")

with open("faiss_chunks.pkl", "rb") as f:
    chunks = pickle.load(f)


# === 임베딩 함수 ===
def get_embedding(text: str) -> list[float]:
    response = client.embeddings.create(input=[text], model="text-embedding-3-small")
    return response.data[0].embedding


# === 검색 함수 ===
def retrieve_relevant_chunks(query: str, top_k: int = 5) -> list[str]:
    query_vector = np.array(get_embedding(query)).astype("float32").reshape(1, -1)
    D, I = index.search(query_vector, top_k)
    return [chunks[i] for i in I[0]]


# === Chat API 호출 함수 (대화 이력 지원) ===
def ask_rag_chatbot(query: str, chat_history: list[dict]) -> str:
    docs = retrieve_relevant_chunks(query, top_k=3)
    rag_text = ""
    for doc in docs:
        rag_text += f"""----------------------
{doc.get("chapter", "")}{doc.get("section", "")}
{doc.get("doc", "")}
----------------------
"""

    system_prompt_format = """당신은 아동 상담 전문가입니다.
참고를 위해 주어진 정보는 아동심리 전문 서적에서 사용자의 발화와 관련된 내용을 찾은 것입니다.
해당 내용을 참고해서 쉽고 최대한 구체적으로 답변을 주세요.

### 참고할 이론
{rag_text}

### 답변 작성 지침
대안을 제시하기보다는 찾은 내용을 활용해서 이론적인 분석을 하는 데 중점을 두세요.
답변을 할 때 다음의 예시를 참고해서 비슷한 형식으로 답변해 주세요.
형식만 참고하고, 내용은 위의 내용을 바탕으로 작성해 주세요.

### 예시
{few_shots}
    """

    system_prompt = system_prompt_format.format(rag_text=rag_text, few_shots=FEW_SHOTS)

    print("System Prompt:", system_prompt)  # 디버깅용 출력

    messages = [{"role": "system", "content": system_prompt}] + chat_history
    messages.append(
        {
            "role": "user",
            "content": query,
        }
    )

    response = client.chat.completions.create(
        model="gpt-4.1-mini", messages=messages, temperature=0.2
    )
    return response.choices[0].message.content.strip()
